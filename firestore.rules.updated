# Firestore Security Rules for PinksMap Mobile App

# Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             (request.auth.token.isAdmin == true || 
              exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
    
    // Products collection - read for all, write for admin only
    match /products/{productId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Orders collection - allow authenticated users to create orders
    // and read their own orders, admin can read/write all orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
                      resource.data.userId == request.auth.uid || // Users can update their own orders
                      isAdmin()                                   // Admins can update any order
                    );
      allow delete: if isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                     (userId == request.auth.uid || isAdmin());
      allow create, update: if isAuthenticated() && userId == request.auth.uid;
      allow delete: if isAdmin();
    }
    
    // Admins collection - special access control
    match /admins/{userId} {
      allow read: if isAuthenticated() && 
                     (userId == request.auth.uid || isAdmin());
      allow write: if isAdmin();
    }
    
    // Categories collection - read for all, write for admin
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Carts collection - users can only access their own cart
    match /carts/{userId} {
      allow read, write: if isAuthenticated() && 
                           (userId == request.auth.uid || isAdmin());
    }
    
    // Wishlists collection - users can only access their own wishlist
    match /wishlists/{userId} {
      allow read, write: if isAuthenticated() && 
                           (userId == request.auth.uid || isAdmin());
    }
    
    // Notifications collection - users can only access their own notifications
    match /notifications/{notificationId} {
      allow read, update: if isAuthenticated() && 
                           resource.data.userId == request.auth.uid;
      allow create, delete: if isAdmin();
    }
    
    // For development only - temporary open access (REMOVE IN PRODUCTION!)
    // Uncomment for testing, but remove before going live
    // match /{document=**} {
    //   allow read, write: if true;
    // }
  }
}

# IMPORTANT NOTES:
# 1. To properly set up admin users, you need to either:
#    a. Use Firebase Custom Claims to add an "isAdmin" claim to admin users (recommended)
#    OR
#    b. Create a document in the "admins" collection with the user's ID
#
# 2. For Custom Claims (Option A), you need to use Firebase Admin SDK in your backend:
#    ```
#    admin.auth().setCustomUserClaims(uid, { isAdmin: true });
#    ```
#
# 3. For the "admins" collection approach (Option B), create a document:
#    Collection: "admins"
#    Document ID: [user's uid]
#    Fields: { role: "admin", email: "admin@example.com" }
